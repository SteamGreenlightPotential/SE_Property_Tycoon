//TEST CASE GENERATED BY AI. Prompt: "Using the given codebase, generate Unit and System tests for Mortgage

using NUnit.Framework;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.TestTools;
using PropertyTycoon;  


// --- Dummy class for boardPlayer ---
// For testing, we define a simple dummy version.



public class PropertyMortgageUnitTests
{
    [Test]
    public void ToggleMortgage_WhenUnmortgaged_MortgagesPropertyAndReturnsTrue()
    {
        // Arrange
        Property testProperty = new Property("TestHouse", 200, "Blue", 20);

        // Pre-condition: property is not mortgaged.
        Assert.IsFalse(testProperty.mortgaged, "Property should initially not be mortgaged.");

        // Act: Toggle mortgage (mortgage the property)
        bool result = testProperty.toggleMortgage();

        // Assert
        Assert.IsTrue(result, "ToggleMortgage should return true when mortgaging an unmortgaged property.");
        Assert.IsTrue(testProperty.mortgaged, "Property should be marked as mortgaged.");
    }

    [Test]
    public void ToggleMortgage_WhenAlreadyMortgaged_UnmortgagesPropertyAndReturnsFalse()
    {
        // Arrange
        Property testProperty = new Property("TestHouse", 200, "Blue", 20);

        // Mortgage the property first.
        testProperty.toggleMortgage();
        Assert.IsTrue(testProperty.mortgaged, "Property should be mortgaged after first toggle.");

        // Act: Toggle mortgage again (unmortgage)
        bool result = testProperty.toggleMortgage();

        // Assert
        Assert.IsFalse(result, "ToggleMortgage should return false when unmortgaging a mortgaged property.");
        Assert.IsFalse(testProperty.mortgaged, "Property should no longer be mortgaged.");
    }
}


public class MortgageScreenSystemTests
{
    private GameObject mortgageScreenObject;
    private MortgageScreen mortgageScreen;
    private boardPlayer dummyBoardPlayer;
    private Player dummyPlayer;
    private Property testProperty;

    [SetUp]
    public void SetUp()
    {
        // Create a GameObject and add the MortgageScreen component.
        mortgageScreenObject = new GameObject("MortgageScreenObject");
        mortgageScreen = mortgageScreenObject.AddComponent<MortgageScreen>();
        boardPlayer dummyBoardPlayer = new boardPlayer();

        // Initialize the dummy boardPlayer.
        dummyPlayer = new ("Tester", dummyBoardPlayer);
        

        // Create a test property. For example, property price 200.
        // (Rent values are not used in this test so we can pass dummy numbers.)
        testProperty = new Property("TestEstate", 200, "Green", 25);

        // Add the property to the dummy player's OwnedProperties.
        dummyPlayer.OwnedProperties.Add(testProperty);

        mortgageScreen.currentPlayer=dummyBoardPlayer;

        
    }

    [TearDown]
    public void TearDown()
    {
        GameObject.DestroyImmediate(mortgageScreenObject);
        GameObject.DestroyImmediate(dummyBoardPlayer);
    }

    [Test]
    public void ButtonPressed_MortgagesProperty_IncreasesPlayerBalanceByHalfPrice()
    {
        // Arrange
        // Ensure property is initially unmortgaged.
        Assert.IsFalse(testProperty.mortgaged, "Property should initially be unmortgaged.");

        int initialBalance = dummyPlayer.Balance;
        int expectedIncrease = testProperty.price / 2;

        // Act: Simulate pressing the button for the first property.
        // MortgageScreen.buttonPressed subtracts one from the given button number.
        mortgageScreen.buttonPressed(1);

        // Assert: Property should now be mortgaged and balance increased.
        Assert.IsTrue(testProperty.mortgaged, "Property should be mortgaged after button press.");
        Assert.AreEqual(initialBalance + expectedIncrease, dummyPlayer.Balance, "Player's balance should increase by half the property price.");
    }

    [Test]
    public void ButtonPressed_UnmortgagesProperty_WithSufficientFunds_DecreasesPlayerBalanceByHalfPrice()
    {
        // Arrange
        // Mortgage the property first.
        // Call buttonPressed(1) to mortgage it.
        mortgageScreen.buttonPressed(1);

        // Confirm the property is mortgaged.
        Assert.IsTrue(testProperty.mortgaged, "Property should be mortgaged.");

        // Record balance after mortgaging.
        int afterMortgageBalance = dummyPlayer.Balance;

        // Act: Press the button again to unmortgage.
        mortgageScreen.buttonPressed(1);

        // Assert:
        // The property's toggleMortgage call in buttonPressed will switch it to unmortgaged.
        Assert.IsFalse(testProperty.mortgaged, "Property should be unmortgaged after second button press.");

        // The player should pay half the property's price.
        int expectedDeduction = testProperty.price / 2;
        Assert.AreEqual(afterMortgageBalance - expectedDeduction, dummyPlayer.Balance, "Player's balance should decrease by half the property price upon unmortgaging.");
    }

    [Test]
    public void ButtonPressed_UnmortgagesProperty_WithInsufficientFunds_DoesNotChangePlayerBalance()
    {
        // Arrange
        // Mortgage the property first.
        mortgageScreen.buttonPressed(1);
        // Set player's balance lower than required to pay unmortgage cost.
        dummyPlayer.Balance = 10; // less than testProperty.price/2 (which is 100 for a price of 200)
        int balanceBefore = dummyPlayer.Balance;

        // Act: Attempt to unmortgage the property.
        mortgageScreen.buttonPressed(1);

        // Assert:
        // The property's toggleMortgage call will still toggle the state.
        // According to the current implementation, even if funds are insufficient,
        // the property becomes unmortgaged but no balance change occurs.
        Assert.IsFalse(testProperty.mortgaged, "Property should be unmortgaged even with insufficient funds.");
        Assert.AreEqual(balanceBefore, dummyPlayer.Balance, "Player's balance should remain unchanged if funds are insufficient to unmortgage.");
    }
}
