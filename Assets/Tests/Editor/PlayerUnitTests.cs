// Generated by AI. Original prompt: Write unit tests for Player.cs
using NUnit.Framework;
using PropertyTycoon;

public class PlayerUnitTests
{
    // Unit Test: Verify player initialization
    [Test]
    public void Test_PlayerInitialization_ValuesCorrect()
    {
        var mockBoardPlayer = new boardPlayer();
        Player player = new Player("Test Player", mockBoardPlayer);
        Assert.AreEqual("Test Player", player.Name);
        Assert.AreEqual(1500, player.Balance);
        Assert.AreEqual(mockBoardPlayer, player.bPlayer);
    }

    // Unit Test: Credit increases balance
    [Test]
    public void Test_Credit_IncreasesBalance()
    {
        Player player = new Player("Test", null);
        player.Credit(200);
        Assert.AreEqual(1700, player.Balance);
    }

    // Unit Test: Debit decreases balance
    [Test]
    public void Test_Debit_DecreasesBalance()
    {
        Player player = new Player("Test", null);
        player.Debit(300);
        Assert.AreEqual(1200, player.Balance);
    }

    // Unit Test: Prevent negative balance
    [Test]
    public void Test_Debit_BlocksOverdraft()
    {
        Player player = new Player("Test", null);
        player.Debit(2000);
        Assert.AreEqual(1500, player.Balance); // No change
    }
}