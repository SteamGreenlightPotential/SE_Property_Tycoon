// Generated by AI. Original prompt: Write comprehensive unit tests for PropertyManager.cs
using NUnit.Framework;
using UnityEngine;
using UnityEngine.TestTools;
using System.Collections.Generic;
using PropertyTycoon;
using System.Collections;

public class PropertyManagerUnitTests
{
    private PropertyManager propertyManager;
    private GameObject gameObject;

    [UnitySetUp]
    public IEnumerator SetUp()
    {
        gameObject = new GameObject();
        propertyManager = gameObject.AddComponent<PropertyManager>();
        yield return null; //Let the propertymanager component run its Awake() code before testing
    }

    [TearDown]
    public void TearDown()
    {
        Object.DestroyImmediate(gameObject);
    }

    // Unit Test: Verify correct number of properties are initialized
    [Test]
    public void Test_InitialiseProperties_AddsCorrectNumberOfProperties()
    {
        Assert.AreEqual(22, propertyManager.properties.Count);
    }

    // Unit Test: Verify first property has correct attributes
    [Test]
    public void Test_InitialiseProperties_FirstPropertyDetailsCorrect()
    {
        Property firstProp = propertyManager.properties[0];
        Assert.AreEqual("The Old Creek", firstProp.name);
        Assert.AreEqual(60, firstProp.price);
        Assert.AreEqual("Brown", firstProp.colour);
        Assert.AreEqual(2, firstProp.tileno);
    }

    // Unit Test: Verify tile numbers are assigned correctly to all properties
    [Test]
    public void Test_InitialiseProperties_TileNumbersAssignedCorrectly()
    {
        int[] expectedTileNos = {2,4,7,9,10,12,14,15,17,19,20,22,24,25,27,28,30,32,33,35,38,40};
        for (int i = 0; i < propertyManager.properties.Count; i++)
        {
            Assert.AreEqual(expectedTileNos[i], propertyManager.properties[i].tileno);
        }
    }

    // Unit Test: Retrieve valid tile property
    [Test]
    public void Test_GetTileProperty_ValidTileReturnsProperty()
    {
        Property prop = propertyManager.getTileProperty(12);
        Assert.IsNotNull(prop);
        Assert.AreEqual("Skywalker Drive", prop.name);
    }

    // Unit Test: Retrieve invalid tile property
    [Test]
    public void Test_GetTileProperty_InvalidTileReturnsNull()
    {
        Property prop = propertyManager.getTileProperty(999);
        Assert.IsNull(prop);
    }
}