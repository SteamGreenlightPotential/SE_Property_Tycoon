// Generated by AI. Original prompt: Write comprehensive unit tests for Turn_Manager.cs
using NUnit.Framework;
using UnityEngine;
using System.Collections;
using PropertyTycoon;
using UnityEngine.TestTools;

public class TurnManagerUnitTests
{
    private Turn_Script turnManager;
    private GameObject turnManagerObject;
    private boardPlayer[] mockPlayers;
    private GameObject propertyManagerObject;

    private GameObject buyScreenObj;
    private GameObject AucScreenObj;
    private PropertyManager pmanager;

    [UnitySetUp]
    public IEnumerator SetUp()
    {
        turnManagerObject = new GameObject();
        turnManager = turnManagerObject.AddComponent<Turn_Script>();
        
        propertyManagerObject = new GameObject();
        pmanager = propertyManagerObject.AddComponent<PropertyManager>();

        // Initialize players and dependencies
        turnManager.players = new boardPlayer[2];
        for (int i = 0; i < 2; i++)
        {
            GameObject playerObj = new GameObject();
            turnManager.players[i] = playerObj.AddComponent<boardPlayer>();
            turnManager.players[i].name="player "+i.ToString();
        }

        //Initialise auction and property screens boilerplate
        buyScreenObj = new GameObject();
        PropertyPurchaseScrn buyScreen = buyScreenObj.AddComponent<PropertyPurchaseScrn>();
        AucScreenObj = new GameObject();
        AuctionScrn aucScreen = AucScreenObj.AddComponent<AuctionScrn>();
        buyScreen.AuctionUI = aucScreen;
        turnManager.propertyPurchaseScrn = buyScreen;

        turnManager.pmanager=pmanager; //assign propertymanager to turnmanager
        yield return null; // Allow Awake() to initialize
    }


    [TearDown]
    public void TearDown()
    {
        Object.DestroyImmediate(turnManagerObject);
        foreach (var player in turnManager.players) Object.DestroyImmediate(player.gameObject);
        Object.DestroyImmediate(propertyManagerObject);
        Object.DestroyImmediate(buyScreenObj);
        Object.DestroyImmediate(AucScreenObj);
    }

    // Unit Test: Verify playerlist initializes correctly in Start()
    [Test]
    public void Test_Start_InitializesPlayerList()
    {
        Assert.AreEqual(2, turnManager.playerlist.Count);
        Assert.AreEqual("Player 1", turnManager.playerlist[0].Name);
    }

    // Unit Test: Verify currentPlayerIndex wraps after last player
    [UnityTest]
    public IEnumerator Test_EndTurn_CyclesPlayerIndex()
    {   
        turnManager.turnEnded = true; // Force allow turn end
        
        yield return turnManager.EndTurn();
       

        Assert.AreEqual(1, turnManager.currentPlayerIndex);
    }

    // Unit Test: Verify round increments after all players take turns
    [UnityTest]
    public IEnumerator Test_RoundIncrementsAfterFullCycle()
    {
        turnManager.currentPlayerIndex = 1; // Last player
        yield return turnManager.StartCoroutine(turnManager.EndTurn());
        Assert.AreEqual(2, turnManager.round);
    }

    //Unit Test: Test taxCheck
    [Test]
    public void Test_TaxCheck()
    {
        boardPlayer player = turnManager.players[0];
        player.balance = 1500;
        player.TileCount = 5;
        player.taxCheck();
        Assert.AreEqual(1400, player.balance);
    }
    
    // Test that jail counter resets properly 
    [UnityTest]
    public IEnumerator Test_JailTurnCounter()
    {
        boardPlayer player = turnManager.players[0];
        player.inJail=true;
        player.TileCount=11;
        
        // Simulate 3 jail turns and then a normal turn
        while (player.inJail==true){
        {
            yield return turnManager.StartCoroutine(turnManager.PlayerMovePhase(player, true));
        }
            }   
        yield return turnManager.StartCoroutine(turnManager.PlayerMovePhase(player, true));

        
        Assert.IsFalse(player.inJail);
        Assert.AreEqual(0, player.jailTurns);
    }


}