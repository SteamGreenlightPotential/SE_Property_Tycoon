// Generated by AI. Original prompt: Write comprehensive system tests for Turn_Manager.cs
using NUnit.Framework;
using UnityEngine;
using UnityEngine.TestTools;
using System.Collections;
using PropertyTycoon;

public class TurnManagerSystemTests
{
    private GameObject turnManagerObject;
    private Turn_Script turnManager;

    [UnitySetUp]
    public IEnumerator SetUp()
    {
        turnManagerObject = new GameObject();
        turnManager = turnManagerObject.AddComponent<Turn_Script>();
        
        // Initialize players and dependencies
        turnManager.players = new boardPlayer[2];
        for (int i = 0; i < 2; i++)
        {
            GameObject playerObj = new GameObject();
            turnManager.players[i] = playerObj.AddComponent<boardPlayer>();
        }
        
        GameObject pmObject = new GameObject();
        turnManager.pmanager = pmObject.AddComponent<PropertyManager>();
        yield return null; // Allow Awake() to initialize
    }

    [TearDown]
    public void TearDown()
    {
        Object.DestroyImmediate(turnManagerObject);
        foreach (var player in turnManager.players) Object.DestroyImmediate(player.gameObject);
    }

    // System Test: Verify full turn cycle advances rounds
    [UnityTest]
    public IEnumerator Test_FullTurnCycle_IncrementsRound()
    {
        turnManager.Start();
        int initialRound = turnManager.round;
        
        // Simulate two turns to complete a full cycle
        for (int i = 0; i < 2; i++)
        {
            turnManager.turnEnded = true;
            turnManager.EndTurnButtonClicked();
            yield return new WaitForSeconds(0.6f);
        }
        
        Assert.AreEqual(initialRound + 1, turnManager.round);
    }

    // System Test: Verify player movement updates TileCount
    [UnityTest]
    public IEnumerator Test_PlayerMovePhase_UpdatesTilePosition()
    {
        turnManager.Start();
        boardPlayer currentPlayer = turnManager.players[0];
        int initialTile = currentPlayer.TileCount;
        
        // Simulate dice roll
        turnManager.isWaitingForRoll = false;
        turnManager.StartCoroutine(turnManager.PlayerMovePhase(currentPlayer));
        yield return new WaitForSeconds(2f); // Wait for movement
        
        Assert.Greater(currentPlayer.TileCount, initialTile);
    }
}