// Some tests Generated by AI. Original prompt: Write unit tests for Property.cs
using NUnit.Framework;
using PropertyTycoon;

public class PropertyUnitTests
{
    // Unit Test: Verify property initialization
    [Test]
    public void Test_PropertyInitialization_ValuesCorrect()
    {
        Property prop = new Property("Test Property", 100, "Red", 10);
        Assert.AreEqual("Test Property", prop.name);
        Assert.AreEqual(100, prop.price);
        Assert.AreEqual("Red", prop.colour);
        Assert.AreEqual(10, prop.baseRent);
        Assert.IsFalse(prop.owned);
    }

    // Unit Test: Add house within limit
    [Test]
    public void Test_AddHouse_WithinLimit()
    {
        Property prop = new Property("Test", 0, "", 0);
        prop.addHouse();
        Assert.AreEqual(1, prop.houses);
    }

    // Unit Test: Prevent exceeding 4 houses
    [Test]
    public void Test_AddHouse_MaxFour()
    {
        Property prop = new Property("Test", 0, "", 0);
        for(int i=0; i<5; i++) prop.addHouse();
        Assert.AreEqual(4, prop.houses);
    }

    // Unit Test: Add hotel only with 4 houses
    [Test]
    public void Test_AddHotel_RequiresFourHouses()
    {
        Property prop = new Property("Test", 0, "", 0);
        prop.houses = 4;
        prop.addHotel();
        Assert.IsTrue(prop.hotel);
        Assert.AreEqual(0, prop.houses);
    }
}