// Some tests Generated by AI. Original prompt: Write comprehensive system tests for Turn_Manager.cs
using NUnit.Framework;
using UnityEngine;
using UnityEngine.TestTools;
using System.Collections;
using PropertyTycoon;
using System.Reflection;
using System.Security.Cryptography;

public class TurnManagerSystemTests
{
    private GameObject turnManagerObject;
    private GameObject propertyManagerObject;

    private GameObject buyScreenObj;
    private GameObject AucScreenObj;
    GameObject upgradeScreenObj;

    private Turn_Script turnManager;

    private PropertyManager pmanager;
    [UnitySetUp]
    public IEnumerator SetUp()
    {
        turnManagerObject = new GameObject();
  
        
        propertyManagerObject = new GameObject();
        pmanager = propertyManagerObject.AddComponent<PropertyManager>();

            PlayerSelection.aiCount=0;
            PlayerSelection.numberOfPlayers=2;
            PlayerSelection.startScreenUsed=true;
            turnManager = turnManagerObject.AddComponent<Turn_Script>();
            // Initialize players and dependencies
            turnManager.players = new boardPlayer[6];
            GameObject[] playerObj= new GameObject[6]; 
             for (int i = 0; i < 6; i++)
        {
            playerObj[i] = new GameObject();
            turnManager.players[i] = playerObj[i].AddComponent<boardPlayer>();
            turnManager.players[i].name="player "+i.ToString();
        }

        //Initialise auction and property screens boilerplate
        buyScreenObj = new GameObject();
        PropertyPurchaseScrn buyScreen = buyScreenObj.AddComponent<PropertyPurchaseScrn>();
        AucScreenObj = new GameObject();
        AuctionScrn aucScreen = AucScreenObj.AddComponent<AuctionScrn>();
        buyScreen.AuctionUI = aucScreen;
        upgradeScreenObj = new GameObject();
            UpgradeScrn upscrn = upgradeScreenObj.AddComponent<UpgradeScrn>();

        upscrn.OwnedPropertyPanel= upgradeScreenObj;
        turnManager.upgradeScrn = upscrn;
        turnManager.propertyPurchaseScrn = buyScreen;

        turnManager.pmanager=pmanager; //Assign propertymanager to turnmanager
        yield return null; // Allow Awake() to initialize
    }

    [TearDown]
    public void TearDown()
    {
        Object.DestroyImmediate(turnManagerObject);
        Object.DestroyImmediate(propertyManagerObject);
        Object.DestroyImmediate(buyScreenObj);
        Object.DestroyImmediate(AucScreenObj);
        foreach (var player in turnManager.players) Object.DestroyImmediate(player.gameObject);
        Time.timeScale=1f;
    }

    // System Test: Verify full turn cycle advances rounds
   [UnityTest]
    public IEnumerator Test_RoundIncrementsAfterFullCycle()
    {


        
        turnManager.currentPlayerIndex = 1; // Last player in a 2-player game
        turnManager.turnEnded = true; // Enable ending the turn
        yield return turnManager.StartCoroutine(turnManager.PlayerMovePhase(turnManager.players[1],true));
        yield return turnManager.StartCoroutine(turnManager.EndTurn());

        
        Assert.AreEqual(2, turnManager.round); // Round should increment after all players
    }
    
    // System Test: Verify player movement updates TileCount
    [UnityTest]
    public IEnumerator Test_PlayerMovePhase_UpdatesTilePosition()
    {
        turnManager.pmanager=pmanager;
        boardPlayer currentPlayer = turnManager.players[0];
        int initialTile = currentPlayer.TileCount;
        // Simulate dice roll
        turnManager.isWaitingForRoll = false;
        yield return turnManager.StartCoroutine(turnManager.PlayerMovePhase(currentPlayer,true));
        Assert.Greater(currentPlayer.TileCount, initialTile);
    }
    // TurnManagerSystemTests.cs
    [UnityTest]
    public IEnumerator Test_JailMechanics()
    {
        // Setup
        var jailedPlayer = turnManager.players[0];
        jailedPlayer.inJail = true;
        jailedPlayer.TileCount = 11;

         // Test 3 turns in jail
        for(int i=0;i<3;i++)
        {
            yield return turnManager.StartCoroutine(turnManager.PlayerMovePhase(jailedPlayer, true));
            Assert.AreEqual(11, jailedPlayer.TileCount);
        } 



        // Verify release after 3 turns
        yield return turnManager.StartCoroutine(turnManager.PlayerMovePhase(jailedPlayer, true));
        Assert.IsFalse(jailedPlayer.inJail);
        Assert.AreNotEqual(11, jailedPlayer.TileCount);
    }

    
    //Test for doubles making you move further
    [UnityTest]
    public IEnumerator Test_DoubleDiceMovement()
    {
        // Setup
        var currentPlayer = turnManager.players[0];
        int initialTile = currentPlayer.TileCount;
        // Execute roll
        yield return turnManager.StartCoroutine(turnManager.PlayerMovePhase(currentPlayer,true,4,4));
        
        // Verify valid movement range
        int movedTiles = currentPlayer.TileCount - initialTile;
        Assert.IsTrue(movedTiles > 8);



    }
    

    //Test to make sure jailed players dont need rent
    [UnityTest]
    public IEnumerator Test_RentSkipWhenOwnerJailed()
    {
        //A LOT of setup needed here- rent transcations needed all players made
        boardPlayer player = turnManager.players[0];
        boardPlayer ownerPlayer2 = turnManager.players[1];
        Player ownerPlayer = new Player("testplayer",ownerPlayer2);

        player.inJail=true;
        player.balance=1000;
        var property = new Property ("Test property",0,"Brown", 10);
        ownerPlayer2.BuyTile(property,ownerPlayer);
        player.TileCount=9;
        //Move player onto owned tile
        yield return turnManager.StartCoroutine(turnManager.PlayerMovePhase(player,true,1,0));
        Assert.AreEqual(1000, player.balance);
    }

    [UnityTest]
    public IEnumerator TestPotLuckDrawn(){
        boardPlayer player = turnManager.players[0];
        // Use test dice values that are not doubles.
        yield return turnManager.StartCoroutine(turnManager.PlayerMovePhase(player, true, 2, 0));
        Assert.AreEqual(1700, player.balance, "Player should receieve 200 from top card");
        TearDown();
        yield return SetUp();
        player = turnManager.players[0];
        yield return turnManager.StartCoroutine(turnManager.PlayerMovePhase(player, true, 1, 16));
        Assert.AreEqual(1550, player.balance, "Player should receieve 50 from top card");
        TearDown();
        yield return SetUp();
        player = turnManager.players[0];
        yield return turnManager.StartCoroutine(turnManager.PlayerMovePhase(player, true, 1, 32));
        Assert.AreEqual(2,player.TileCount,"Should be moved to creek");
    }

    [UnityTest]
    public IEnumerator TestOpportunityKnocksDrawn(){
        boardPlayer player = turnManager.players[0];
        // Use test dice values that are not doubles.
        yield return turnManager.StartCoroutine(turnManager.PlayerMovePhase(player, true, 6, 1));
        Assert.AreEqual(1550, player.balance, "Player should receieve 50 from top card");
        TearDown();
        yield return SetUp();
        player = turnManager.players[0];
        yield return turnManager.StartCoroutine(turnManager.PlayerMovePhase(player, true, 1, 21));
        Assert.AreEqual(1600, player.balance, "Player should receieve 100 from top card");

    }


    
}

//GENERATED USING AI. PROMPT: Generate system and unit tests for the "Double roll" functionality in this script
public class TurnManagerDoublesTests
{
    private GameObject turnManagerObject;
    private GameObject propertyManagerObject;
    GameObject upgradeScreenObj;
    private Turn_Script turnManager;
    private PropertyManager pmanager;

    // A simple setup that instantiates a Turn_Script with a couple of players.
    [UnitySetUp]
    public IEnumerator SetUp()
    {
        // Create and set up Turn_Script
        turnManagerObject = new GameObject("TurnManager");

            PlayerSelection.aiCount=0;
            PlayerSelection.numberOfPlayers=2;
            turnManager = turnManagerObject.AddComponent<Turn_Script>();
            // Initialize players and dependencies
            turnManager.players = new boardPlayer[6];
            GameObject[] playerObj= new GameObject[6]; 
             for (int i = 0; i < 6; i++)
        {
            playerObj[i] = new GameObject();
            turnManager.players[i] = playerObj[i].AddComponent<boardPlayer>();
            turnManager.players[i].name="player "+i.ToString();
        }

        // Create and attach a dummy PropertyManager as required by Turn_Script.
        propertyManagerObject = new GameObject("PropertyManager");
        pmanager = propertyManagerObject.AddComponent<PropertyManager>();
        turnManager.pmanager = pmanager;

        GameObject purchaseScreenObject = new GameObject("PropertyPurchaseScreen");PropertyPurchaseScrn ppscreen = purchaseScreenObject.AddComponent<PropertyPurchaseScrn>();
        //have to make ten million objects for turnmanager to be happy
        GameObject AuctionScreenObject = new GameObject("AuctionPurchaseScreen"); AuctionScrn auscreen = purchaseScreenObject.AddComponent<AuctionScrn>();
        ppscreen.AuctionUI = auscreen;
        upgradeScreenObj = new GameObject();
        UpgradeScrn upscrn = upgradeScreenObj.AddComponent<UpgradeScrn>();
        upscrn.OwnedPropertyPanel= upgradeScreenObj;
        turnManager.upgradeScrn = upscrn;
            
        turnManager.propertyPurchaseScrn = ppscreen; //Add property purchase screen
        yield return null;
    }

    [TearDown]
    public void TearDown()
    {
        Object.DestroyImmediate(turnManagerObject);
        foreach (var player in turnManager.players)
        {
            Object.DestroyImmediate(player.gameObject);
        }
        Object.DestroyImmediate(propertyManagerObject);
        Time.timeScale = 1f;
    }

    /// <summary>
    /// Test that when the player does not roll doubles (i.e. testRoll != testRoll2),
    /// the PlayerMovePhase processes a single movement (already indirectly tested elsewhere).
    /// </summary>
    [UnityTest]
    public IEnumerator Test_PlayerMovePhase_NoDoubles_SingleMove()
    {
        boardPlayer player = turnManager.players[0];
        int initialTile = player.TileCount;
        // Use test dice values that are not doubles.
        yield return turnManager.StartCoroutine(turnManager.PlayerMovePhase(player, true, 4, 5));

        // Expect the player's TileCount to have increased by roll + roll2 (4+3).
        Assert.AreEqual(initialTile + 9, player.TileCount, "Player should move exactly 7 tiles when no doubles are rolled.");
        Assert.IsFalse(player.inJail, "Player should not be sent to jail when not rolling doubles.");
    }

    


    /// <summary>
    /// Test that if the player rolls doubles repeatedly (three times in a row),
    /// the game logic sends the player to jail.
    /// </summary>
    
    // it doesnt work i dont know why i give up
    /*
    [UnityTest]
    public IEnumerator Test_PlayerMovePhase_TripleDoubles_GoesToJail()
    {
        boardPlayer player = turnManager.players[0];
        // Ensure a known starting state.
        player.inJail = false;
        // Record the starting tile (should be 1 by default).
        int initialTile = player.TileCount;

        // Use test dice values that are doubles. Since the coroutine uses the same fixed values each loop
        // in testMode, the player will roll doubles on each iteration.
        yield return turnManager.StartCoroutine(turnManager.PlayerMovePhase(player, true, 4, 4));

        // The logic in PlayerMovePhase will increment a loop counter each time a double is rolled.
        // After three doubles (i.e. loopcount > 3), jailBound is set and the player is sent to jail.
        Assert.IsTrue(player.inJail, "Player should be marked as in jail after rolling three consecutive doubles.");
        Assert.AreEqual(11, player.TileCount, "Player's TileCount should be set to the jail tile (11) after excessive doubles.");
    }
    */
}




