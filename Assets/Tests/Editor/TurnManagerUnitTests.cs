// Generated by AI. Original prompt: Write comprehensive unit tests for Turn_Manager.cs
using NUnit.Framework;
using UnityEngine;
using System.Collections;
using PropertyTycoon;
using UnityEngine.TestTools;

public class TurnManagerUnitTests
{
    private Turn_Script turnManager;
    private GameObject turnManagerObject;
    private boardPlayer[] mockPlayers;
    private GameObject propertyManagerObject;

    private PropertyManager pmanager;

    [UnitySetUp]
    public IEnumerator SetUp()
    {
        turnManagerObject = new GameObject();
        turnManager = turnManagerObject.AddComponent<Turn_Script>();
        
        propertyManagerObject = new GameObject();
        pmanager = propertyManagerObject.AddComponent<PropertyManager>();

        // Initialize players and dependencies
        turnManager.players = new boardPlayer[2];
        for (int i = 0; i < 2; i++)
        {
            GameObject playerObj = new GameObject();
            turnManager.players[i] = playerObj.AddComponent<boardPlayer>();
            turnManager.players[i].name="player "+i.ToString();
        }
        
        turnManager.Start();
        yield return null; // Allow Awake() to initialize
    }


    [TearDown]
    public void TearDown()
    {
        Object.DestroyImmediate(turnManagerObject);
        foreach (var player in turnManager.players) Object.DestroyImmediate(player.gameObject);
        Object.DestroyImmediate(propertyManagerObject);
    }

    // Unit Test: Verify playerlist initializes correctly in Start()
    [Test]
    public void Test_Start_InitializesPlayerList()
    {
        Assert.AreEqual(2, turnManager.playerlist.Count);
        Assert.AreEqual("player 1", turnManager.playerlist[0].Name);
    }

    // Unit Test: Verify currentPlayerIndex wraps after last player
    [UnityTest]
    public IEnumerator Test_EndTurn_CyclesPlayerIndex()
    {
         // Save original time scale and speed up time
        // this worked apparently???????
        float originalTimeScale = Time.timeScale;
        Time.timeScale = 100f; // Makes 0.5s delay ~0.005s
        
        turnManager.turnEnded = true; // Force allow turn end
        
        turnManager.EndTurnButtonClicked();
        yield return new WaitUntil(() => turnManager.currentPlayerIndex == 1); // Wait for index 

        
        Time.timeScale = originalTimeScale; //fix timescale after

        Assert.AreEqual(1, turnManager.currentPlayerIndex);
    }

    // Unit Test: Verify round increments after all players take turns
    [Test]
    public void Test_RoundIncrementsAfterFullCycle()
    {
        turnManager.currentPlayerIndex = 1; // Last player
        turnManager.EndTurnButtonClicked();
        Assert.AreEqual(1, turnManager.round);
    }

    //Unit Test: Test taxCheck
    [Test]
    public void Test_TaxCheck()
    {
        boardPlayer player = turnManager.players[0];
        player.balance = 1500;
        player.TileCount = 5;
        player.taxCheck();
        Assert.AreEqual(1400, player.balance);
    }
    
    // TurnManagerUnitTests.cs
    [Test]
    public void Test_JailTurnCounter()
    {
        var player = new boardPlayer { inJail = true };
        
        // Simulate 3 jail turns
        for (int i = 0; i < 3; i++)
        {
            player.jailTurns = i;
            turnManager.PlayerMovePhase(player, true);
        }
        
        Assert.IsFalse(player.inJail);
        Assert.AreEqual(0, player.jailTurns);
    }


}