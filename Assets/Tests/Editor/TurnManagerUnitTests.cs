// Generated by AI. Original prompt: Write comprehensive unit tests for Turn_Manager.cs
using NUnit.Framework;
using UnityEngine;
using System.Collections;
using PropertyTycoon;
using UnityEngine.TestTools;

public class TurnManagerUnitTests
{
    private Turn_Script turnManager;
    private GameObject turnManagerObject;
    private boardPlayer[] mockPlayers;

    [SetUp]
    public void SetUp()
    {
        turnManagerObject = new GameObject();
        turnManager = turnManagerObject.AddComponent<Turn_Script>();
        
        // Initialize mock players
        mockPlayers = new boardPlayer[2];
        for (int i = 0; i < 2; i++)
        {
            GameObject playerObj = new GameObject();
            mockPlayers[i] = playerObj.AddComponent<boardPlayer>();
        }
        turnManager.players = mockPlayers;
        
        // Initialize PropertyManager
        GameObject pmObject = new GameObject();
        turnManager.pmanager = pmObject.AddComponent<PropertyManager>();
        turnManager.pmanager.initialiseProperties();
    }

    [TearDown]
    public void TearDown()
    {
        Object.DestroyImmediate(turnManagerObject);
        foreach (var player in mockPlayers) Object.DestroyImmediate(player.gameObject);
    }

    // Unit Test: Verify playerlist initializes correctly in Start()
    [Test]
    public void Test_Start_InitializesPlayerList()
    {
        turnManager.Start();
        Assert.AreEqual(2, turnManager.playerlist.Count);
        Assert.AreEqual("player 1", turnManager.playerlist[0].Name);
    }

    // Unit Test: Verify currentPlayerIndex wraps after last player
    [UnityTest]
    public IEnumerator Test_EndTurn_CyclesPlayerIndex()
    {
        turnManager.Start();
        turnManager.turnEnded = true; // Force allow turn end
        
        turnManager.EndTurnButtonClicked();
        yield return new WaitForSeconds(0.6f); // Wait for coroutine
        
        Assert.AreEqual(1, turnManager.currentPlayerIndex);
    }

    // Unit Test: Verify round increments after all players take turns
    [Test]
    public void Test_RoundIncrementsAfterFullCycle()
    {
        turnManager.currentPlayerIndex = 1; // Last player
        turnManager.EndTurnButtonClicked();
        Assert.AreEqual(1, turnManager.round);
    }
}