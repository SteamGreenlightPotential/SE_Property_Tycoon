// Some tests Generated by AI. Original prompt: Write comprehensive system tests for Turn_Manager.cs
using NUnit.Framework;
using UnityEngine;
using UnityEngine.TestTools;
using System.Collections;
using PropertyTycoon;
using System.Reflection;
using System.Security.Cryptography;

public class StartScreenTests
{
    private GameObject turnManagerObject;
    private GameObject propertyManagerObject;

    private GameObject buyScreenObj;
    private GameObject AucScreenObj;

    private Turn_Script turnManager;

    private PropertyManager pmanager;
    
    [TearDown]
    public void TearDown()
    {
        Object.DestroyImmediate(turnManagerObject);
        Object.DestroyImmediate(propertyManagerObject);
        Object.DestroyImmediate(buyScreenObj);
        Object.DestroyImmediate(AucScreenObj);
        foreach (var player in turnManager.players) Object.DestroyImmediate(player.gameObject);
        Time.timeScale=1f;
    }

    // System Test: Verify full turn cycle advances rounds
   [UnityTest]
   public IEnumerator NormalTest(){

    PlayerSelection.aiCount=1;
    PlayerSelection.numberOfPlayers=6;
    PlayerSelection.startScreenUsed=true;

    turnManagerObject = new GameObject();
        turnManager = turnManagerObject.AddComponent<Turn_Script>();
        

        // Initialize players and dependencies boilerplate
        turnManager.players = new boardPlayer[6];
            GameObject[] playerObj= new GameObject[6]; 
             for (int i = 0; i < 6; i++)
        {
            playerObj[i] = new GameObject();
            turnManager.players[i] = playerObj[i].AddComponent<boardPlayer>();
            turnManager.players[i].name="player "+i.ToString();
        }

    //wait for turmanager to start
    yield return null;
    
    Assert.AreEqual(turnManager.players.Length,6);
    Assert.AreEqual(turnManager.playerlist.Count,6);
    Assert.IsTrue(turnManager.playerlist[5].isAI==true);
    Assert.IsTrue(turnManager.playerlist[3].isAI==false);
   }

   [UnityTest]
   public IEnumerator MinTest(){

    PlayerSelection.aiCount=0;
    PlayerSelection.numberOfPlayers=2;
    PlayerSelection.startScreenUsed=true;
        turnManagerObject = new GameObject();
        turnManager = turnManagerObject.AddComponent<Turn_Script>();
        

        // Initialize players and dependencies boilerplate
        turnManager.players = new boardPlayer[6];
            GameObject[] playerObj= new GameObject[6]; 
             for (int i = 0; i < 6; i++)
        {
            playerObj[i] = new GameObject();
            turnManager.players[i] = playerObj[i].AddComponent<boardPlayer>();
            turnManager.players[i].name="player "+i.ToString();
        }

    //wait for turmanager to start
    yield return null;
    Assert.AreEqual(turnManager.players.Length,2);
    Assert.AreEqual(turnManager.playerlist.Count,2);
    Assert.IsTrue(turnManager.playerlist[0].isAI==false);
    Assert.IsTrue(turnManager.playerlist[1].isAI==false);
   }

   [UnityTest]
   public IEnumerator TooManyAiTest(){
    PlayerSelection.aiCount=5;
    PlayerSelection.numberOfPlayers=2;
    PlayerSelection.startScreenUsed=true;
        turnManagerObject = new GameObject();
        turnManager = turnManagerObject.AddComponent<Turn_Script>();
        turnManager.isWaitingForRoll=false;

        // Initialize players and dependencies boilerplate
        turnManager.players = new boardPlayer[6];
            GameObject[] playerObj= new GameObject[6]; 
             for (int i = 0; i < 6; i++)
        {
            playerObj[i] = new GameObject();
            turnManager.players[i] = playerObj[i].AddComponent<boardPlayer>();
            turnManager.players[i].name="player "+i.ToString();
        }

    //wait for turmanager to start
    yield return null;
    Assert.AreEqual(turnManager.players.Length,2);
    Assert.AreEqual(turnManager.playerlist.Count,2);
    Assert.IsTrue(turnManager.playerlist[0].isAI==true);
    Assert.IsTrue(turnManager.playerlist[1].isAI==true);
   }

   [UnityTest]
   public IEnumerator AllAiTest(){
    PlayerSelection.aiCount=6;
    PlayerSelection.numberOfPlayers=6;
    PlayerSelection.startScreenUsed=true;
          turnManagerObject = new GameObject();
        turnManager = turnManagerObject.AddComponent<Turn_Script>();
        turnManager.isWaitingForRoll=false;

        // Initialize players and dependencies boilerplate
        turnManager.players = new boardPlayer[6];
            GameObject[] playerObj= new GameObject[6]; 
             for (int i = 0; i < 6; i++)
        {
            playerObj[i] = new GameObject();
            turnManager.players[i] = playerObj[i].AddComponent<boardPlayer>();
            turnManager.players[i].name="player "+i.ToString();
        }

    //wait for turmanager to start
    yield return null;
    Assert.AreEqual(turnManager.players.Length,6);
    Assert.AreEqual(turnManager.playerlist.Count,6);
    for(int i=0;i<6;i++)
    Assert.IsTrue(turnManager.playerlist[i].isAI==true);
   }
    

}





