// Generated by AI. Original prompt: Write comprehensive system tests for Player_Movement.cs
using NUnit.Framework;
using UnityEngine;
using UnityEngine.TestTools;
using System.Collections;
using PropertyTycoon;

public class PlayerMovementSystemTests
{
    private GameObject playerObj;
    private boardPlayer player;
    private PropertyManager propManager;

    [UnitySetUp]
    public IEnumerator SetUp()
    {
        playerObj = new GameObject();
        player = playerObj.AddComponent<boardPlayer>();
        propManager = new GameObject().AddComponent<PropertyManager>();
        propManager.initialiseProperties();
        yield return null;
    }

    [TearDown]
    public void TearDown()
    {
        Object.DestroyImmediate(playerObj);
        Object.DestroyImmediate(propManager.gameObject);
    }

    // System Test: Full movement sequence with tile ownership check
    [UnityTest]
    public IEnumerator Test_Movement_UpdatesPositionAndOwnership()
    {
        player.Move(5); // Start moving 5 tiles
        yield return new WaitForSeconds(1.5f); // Wait for coroutine
        
        Assert.AreEqual(5, player.TileCount);
        Property currentTile = propManager.getTileProperty(player.TileCount);
        Assert.IsNotNull(currentTile);
    }

    // System Test: Rent payment between players
    [UnityTest]
    public IEnumerator Test_PayRent_TransfersBalance()
    {
        boardPlayer owner = new GameObject().AddComponent<boardPlayer>();
        Property ownedProp = propManager.getTileProperty(2);
        owner.BuyTile(ownedProp);

        int initialBalance = player.Balance;
        player.PayRent(owner.GetComponent<Player>(), owner, 50, ownedProp);
        
        Assert.AreEqual(initialBalance - 50, player.Balance);
        yield return null;
    }
}