// Generated by AI. Original prompt: Write comprehensive unit tests for Player_Movement.cs
using NUnit.Framework;
using UnityEngine;
using System.Collections;
using PropertyTycoon;
using System.Collections.Generic; 


public class PlayerMovementUnitTests
{
    private boardPlayer bplayer;
    private GameObject testGameObject;

    private Player player;
    [SetUp]
    public void SetUp()
    {
        testGameObject = new GameObject();
        bplayer = testGameObject.AddComponent<boardPlayer>();
        bplayer.OwnedProperties = new List<Property>();
        player = new Player("test",bplayer);

    }

    [TearDown]
    public void TearDown()
    {
        Object.DestroyImmediate(testGameObject);
    }

    // Unit Test: Verify TileCount increments correctly during movement
    [Test]
    public void Test_NextDir_UpdatesTileCount()
    {
        bplayer.TileCount = 0;
        Vector3 dir = bplayer.NextDir(); // Requires internal access
        Assert.AreEqual(1, bplayer.TileCount);
    }



    // Unit Test: Validate direction calculation for corner tiles
    [Test]
    public void Test_NextDir_ReturnsCorrectDirection()
    {
        bplayer.TileCount = 10; // Edge of top-right corner
        Vector3 dir = bplayer.NextDir();
        Assert.AreEqual(Vector3.down, dir);
    }

    // Unit Test: Successful tile purchase
    [Test]
    public void Test_BuyTile_SufficientBalance()
    {
        Property testProp = new Property("Test", 100, "Brown", 10);
        bplayer.BuyTile(testProp,player);
        Assert.Contains(testProp, bplayer.OwnedProperties);
    }

    // Unit Test: Failed tile purchase due to low balance
    [Test]
    public void Test_BuyTile_InsufficientBalance()
    {
        Property expensiveProp = new Property("Luxury", 9999, "DBlue", 50);
        bplayer.BuyTile(expensiveProp,player);
        Assert.IsEmpty(bplayer.OwnedProperties);
    }
}